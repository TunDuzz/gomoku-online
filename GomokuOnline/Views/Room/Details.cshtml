@model GomokuOnline.Models.Entities.GameRoom
@using GomokuOnline.Models.Entities
@{
    ViewData["Title"] = $"Phòng {Model.Name}";
}

<div class="container-fluid mt-3">
    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Room Info -->
            <div class="card mb-3">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-chess-board me-2"></i>
                            @Model.Name
                        </h5>
                        <div>
                            @switch (Model.Status)
                            {
                                case RoomStatus.Waiting:
                                    <span class="badge bg-warning text-dark">Đang chờ</span>
                                    break;
                                case RoomStatus.Playing:
                                    <span class="badge bg-success">Đang chơi</span>
                                    break;
                                case RoomStatus.Finished:
                                    <span class="badge bg-info">Hoàn thành</span>
                                    break;
                                default:
                                    <span class="badge bg-secondary">@Model.Status</span>
                                    break;
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="text-muted mb-3">@Model.Description</p>
                    }
                    
                    <div class="row text-center">
                        <div class="col-3">
                            <h6 class="text-primary">@Model.BoardSize</h6>
                            <small class="text-muted">Bàn cờ</small>
                        </div>
                        <div class="col-3">
                            <h6 class="text-success">@Model.WinCondition</h6>
                            <small class="text-muted">Thắng</small>
                        </div>
                        <div class="col-3">
                            <h6 class="text-info">@Model.Participants.Count(p => p.Type == ParticipantType.Player)</h6>
                            <small class="text-muted">Người chơi</small>
                        </div>
                        <div class="col-3">
                            <h6 class="text-warning">@Model.TimeLimitMinutes</h6>
                            <small class="text-muted">Phút</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Game Board -->
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-gamepad me-2"></i>Bàn cờ
                    </h6>
                </div>
                <div class="card-body">
                    @if (Model.Status == RoomStatus.Waiting)
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-chess-board fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Chưa bắt đầu game</h5>
                            <p class="text-muted">Chờ chủ phòng bắt đầu game</p>
                        </div>
                    }
                    else if (Model.Status == RoomStatus.Playing && Model.Games.Any())
                    {
                        var currentGame = Model.Games.First();
                        <div class="text-center">
                            <div class="alert alert-info">
                                <i class="fas fa-spinner fa-spin me-2"></i>
                                Game đang diễn ra, chuyển hướng...
                            </div>
                            <script>
                                // Tự động chuyển hướng vào game sau 1 giây
                                setTimeout(function() {
                                    window.location.href = '/Game/Room/@currentGame.Id';
                                }, 1000);
                            </script>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-info-circle fa-3x text-info mb-3"></i>
                            <h5 class="text-info">Không có game đang chạy</h5>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Players -->
            <div class="card mb-3">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-users me-2"></i>Người chơi
                    </h6>
                </div>
                <div class="card-body p-2" id="playersContainer">
                    @{
                        var players = Model.Participants.Where(p => p.Type == ParticipantType.Player).ToList();
                    }
                    
                    @foreach (var player in players.OrderBy(p => p.PlayerOrder))
                    {
                        <div class="player-item mb-2 p-2 border rounded" data-player-id="@player.UserId">
                            <div class="d-flex align-items-center">
                                <div class="me-2">
                                    <i class="fas fa-user-circle @(player.PlayerColor == "X" ? "text-primary" : "text-danger")"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-bold">@player.User.Username</div>
                                    <div class="d-flex justify-content-between">
                                        <span class="badge @(player.PlayerColor == "X" ? "bg-primary" : "bg-danger")">
                                            @player.PlayerColor
                                        </span>
                                        @if (player.IsReady)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-check me-1"></i>Sẵn sàng
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning text-dark">
                                                <i class="fas fa-clock me-1"></i>Chưa sẵn sàng
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Room Actions -->
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-cogs me-2"></i>Hành động
                    </h6>
                </div>
                <div class="card-body">
                    @{
                        var currentUserId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
                        var isOwner = Model.CreatedByUserId == currentUserId;
                        var isParticipant = Model.Participants.Any(p => p.UserId == currentUserId);
                    }
                    
                    @if (!isParticipant)
                    {
                        <button class="btn btn-success w-100 mb-2" onclick="joinRoom()">
                            <i class="fas fa-sign-in-alt me-2"></i>Tham gia phòng
                        </button>
                    }
                    else
                    {
                        @if (isOwner && Model.Status == RoomStatus.Waiting)
                        {
                            <button class="btn btn-primary w-100 mb-2" onclick="startGame()">
                                <i class="fas fa-play me-2"></i>Bắt đầu game
                            </button>
                        }
                        
                        <button class="btn btn-warning w-100 mb-2" onclick="toggleReady()" id="readyBtn">
                            <i class="fas fa-check me-2"></i>
                            <span id="readyText">Sẵn sàng</span>
                        </button>
                        
                        <button class="btn btn-danger w-100" onclick="leaveRoom()">
                            <i class="fas fa-sign-out-alt me-2"></i>Rời phòng
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Password Modal -->
<div class="modal fade" id="passwordModal" tabindex="-1" aria-labelledby="passwordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="passwordModalLabel">
                    <i class="fas fa-key me-2"></i>Nhập mật khẩu phòng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Phòng này yêu cầu mật khẩu để tham gia.
                </div>
                <div class="mb-3">
                    <label for="roomPassword" class="form-label">Mật khẩu:</label>
                    <input type="password" class="form-control" id="roomPassword" placeholder="Nhập mật khẩu...">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Hủy
                </button>
                <button type="button" class="btn btn-primary" onclick="submitPassword()">
                    <i class="fas fa-sign-in-alt me-2"></i>Tham gia
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const roomId = @Model.Id;
        const currentUserId = @currentUserId;
        const isOwner = @isOwner.ToString().ToLower();
        const isParticipant = @isParticipant.ToString().ToLower();
        
        // SignalR connection
        let roomConnection;
        
        // Initialize SignalR
        async function initializeSignalR() {
            try {
                roomConnection = new signalR.HubConnectionBuilder()
                    .withUrl("/roomHub")
                    .withAutomaticReconnect()
                    .build();
                
                // Join room group
                await roomConnection.start();
                await roomConnection.invoke("JoinRoom", roomId);
                
                // Listen for events
                roomConnection.on("UserJoinedRoom", (userId, roomId) => {
                    console.log(`User ${userId} joined room ${roomId}`);
                    // Update participant list without reloading
                    updateParticipantList();
                });
                
                roomConnection.on("UserLeftRoom", (userId, roomId) => {
                    console.log(`User ${userId} left room ${roomId}`);
                    // Update participant list without reloading
                    updateParticipantList();
                });
                
                roomConnection.on("PlayerReadyStatusChanged", (data) => {
                    console.log("Player ready status changed:", data);
                    updatePlayerReadyStatus(data.userId, data.isReady);
                });
                
                roomConnection.on("GameStarted", (data) => {
                    console.log("Game started:", data);
                    // Auto redirect to game room
                    setTimeout(() => {
                        window.location.href = `/Game/Room/${data.gameId}`;
                    }, 1000);
                });
                
                roomConnection.on("Error", (message) => {
                    console.error("SignalR Error:", message);
                });
                
                console.log("SignalR connected to RoomHub");
            } catch (err) {
                console.error("SignalR connection failed:", err);
            }
        }
        
        // Update participant list from server
        async function updateParticipantList() {
            try {
                console.log('Updating participant list for room:', roomId);
                const response = await fetch(`/Room/GetParticipants?roomId=${roomId}`);
                const data = await response.json();
                
                console.log('GetParticipants response:', data);
                
                if (data.success) {
                    updateParticipantsUI(data.participants);
                } else {
                    console.error('Failed to get participants:', data.message);
                }
            } catch (error) {
                console.error('Error updating participant list:', error);
            }
        }

        // Update participants UI
        function updateParticipantsUI(participants) {
            const container = document.getElementById('participantsContainer');
            if (!container) return;

            console.log('Updating participants UI with:', participants);

            let html = '';
            participants.forEach(participant => {
                const isOwner = participant.isOwner;
                const isReady = participant.isReady;
                const isCurrentUser = participant.userId === currentUserId;
                
                console.log(`Participant ${participant.username}: isReady=${isReady}, isCurrentUser=${isCurrentUser}`);
                
                const ownerBadge = isOwner ? '<span class="badge bg-primary me-1">Chủ phòng</span>' : '';
                const readyBadge = isReady ? 
                    '<span class="badge bg-success"><i class="fas fa-check me-1"></i>Sẵn sàng</span>' :
                    '<span class="badge bg-warning text-dark"><i class="fas fa-clock me-1"></i>Chưa sẵn sàng</span>';
                
                html += `
                    <div class="participant-item mb-2 p-2 border rounded ${isCurrentUser ? 'border-primary bg-light' : ''}" data-player-id="${participant.userId}">
                        <div class="d-flex align-items-center">
                            <div class="me-2">
                                <i class="fas fa-user-circle text-primary"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="fw-bold">${participant.username}</div>
                                <div class="d-flex justify-content-between">
                                    ${ownerBadge}
                                    ${readyBadge}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
            
            // Update room actions after UI is updated
            setTimeout(() => updateRoomActions(), 100);
        }

        // Update room actions (join/leave buttons)
        function updateRoomActions() {
            // Check if current user is participant
            const participantItem = document.querySelector(`[data-player-id="${currentUserId}"]`);
            const isParticipant = participantItem !== null;
            
            const joinBtn = document.getElementById('joinBtn');
            const leaveBtn = document.getElementById('leaveBtn');
            const readyBtn = document.getElementById('readyBtn');
            const startBtn = document.getElementById('startBtn');
            
            console.log('updateRoomActions - Current state:', {
                currentUserId,
                isParticipant,
                participantItem: participantItem ? 'found' : 'not found',
                joinBtn: joinBtn ? 'found' : 'not found',
                leaveBtn: leaveBtn ? 'found' : 'not found',
                readyBtn: readyBtn ? 'found' : 'not found',
                startBtn: startBtn ? 'found' : 'not found'
            });
            
            if (isParticipant) {
                // User is in room
                if (joinBtn) joinBtn.style.display = 'none';
                if (leaveBtn) leaveBtn.style.display = 'block';
                if (readyBtn) readyBtn.style.display = 'block';
                
                // Show start button only for room owner
                const isOwner = '@(Model.CreatedByUserId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)' === 'True';
                if (startBtn) {
                    startBtn.style.display = isOwner ? 'block' : 'none';
                }
                
                console.log('User is participant - showing ready/leave buttons');
            } else {
                // User is not in room
                if (joinBtn) joinBtn.style.display = 'block';
                if (leaveBtn) leaveBtn.style.display = 'none';
                if (readyBtn) readyBtn.style.display = 'none';
                if (startBtn) startBtn.style.display = 'none';
                
                console.log('User is not participant - showing join button');
            }
        }

        // Update player ready status in UI
        function updatePlayerReadyStatus(userId, isReady) {
            const playerItem = document.querySelector(`[data-player-id="${userId}"]`);
            if (playerItem) {
                const badge = playerItem.querySelector('.badge:last-child');
                if (badge) {
                    if (isReady) {
                        badge.className = 'badge bg-success';
                        badge.innerHTML = '<i class="fas fa-check me-1"></i>Sẵn sàng';
                    } else {
                        badge.className = 'badge bg-warning text-dark';
                        badge.innerHTML = '<i class="fas fa-clock me-1"></i>Chưa sẵn sàng';
                    }
                }
            }
            
            // Update current user's ready button if it's them
            if (userId === currentUserId) {
                const readyBtn = document.getElementById('readyBtn');
                const readyText = document.getElementById('readyText');
                if (readyBtn && readyText) {
                    if (isReady) {
                        readyText.textContent = 'Hủy sẵn sàng';
                        readyBtn.className = 'btn btn-secondary w-100 mb-2';
                    } else {
                        readyText.textContent = 'Sẵn sàng';
                        readyBtn.className = 'btn btn-warning w-100 mb-2';
                    }
                }
            }
        }
        
        // Join room
        function joinRoom() {
            // Kiểm tra xem phòng có cần mật khẩu không
            const isPrivate = @Model.IsPrivate.ToString().ToLower();
            
            if (isPrivate) {
                // Hiển thị modal nhập mật khẩu
                $('#roomPassword').val(''); // Reset password field
                $('#passwordModal').modal('show');
            } else {
                // Gửi request không có mật khẩu
                joinRoomWithPassword(null);
            }
        }
        
        // Join room with password
        function joinRoomWithPassword(password) {
            fetch('/Room/Join', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    roomId: roomId,
                    password: password
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Đóng modal nếu đang mở
                    $('#passwordModal').modal('hide');
                    
                    // Update participant list immediately
                    updateParticipantList();
                    
                    // Update join/leave buttons after a short delay
                    setTimeout(() => updateRoomActions(), 200);
                    
                    // Force update again to ensure it's updated
                    setTimeout(() => {
                        updateParticipantList();
                        updateRoomActions();
                    }, 1000);
                    
                    // Show success message
                    const toast = document.createElement('div');
                    toast.className = 'alert alert-success position-fixed';
                    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                    toast.innerHTML = `
                        <i class="fas fa-check me-2"></i>
                        <strong>Thành công!</strong>
                        <br>
                        <small>Đã tham gia phòng thành công.</small>
                        <button type="button" class="btn-close ms-2" onclick="this.parentElement.remove()"></button>
                    `;
                    document.body.appendChild(toast);
                    
                    // Remove toast after 3 seconds
                    setTimeout(() => {
                        if (toast.parentElement) {
                            toast.remove();
                        }
                    }, 3000);
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra!');
            });
        }

        // Submit password from modal
        function submitPassword() {
            const password = document.getElementById('roomPassword').value;
            if (!password.trim()) {
                alert('Vui lòng nhập mật khẩu!');
                return;
            }
            
            joinRoomWithPassword(password);
        }

        // Handle Enter key in password input
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('roomPassword');
            if (passwordInput) {
                passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        submitPassword();
                    }
                });
            }
            
            // Initialize SignalR
            initializeSignalR();
            
            // Kiểm tra nếu đã tham gia phòng và game đang chạy thì tự động chuyển hướng
            const roomStatus = '@Model.Status.ToString()';
            const hasGames = @Model.Games.Any().ToString().ToLower();
            const gameId = @(Model.Games.Any() ? Model.Games.First().Id : 0);
            
            if (isParticipant && roomStatus === 'Playing' && hasGames === 'true' && gameId > 0) {
                setTimeout(function() {
                    window.location.href = '/Game/Room/' + gameId;
                }, 1000);
            }
        });
        
        // Start game
        function startGame() {
            fetch('/Room/StartGame', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    roomId: roomId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = data.redirectUrl;
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra!');
            });
        }
        
        // Toggle ready status
        function toggleReady() {
            const readyBtn = document.getElementById('readyBtn');
            const readyText = document.getElementById('readyText');
            const isReady = readyText.textContent === 'Sẵn sàng';
            
            console.log('toggleReady called, current state:', isReady);
            
            // Disable button temporarily to prevent double-click
            readyBtn.disabled = true;
            
            // Update UI immediately for better UX
            const newIsReady = !isReady;
            if (newIsReady) {
                readyText.textContent = 'Hủy sẵn sàng';
                readyBtn.className = 'btn btn-secondary w-100 mb-2';
            } else {
                readyText.textContent = 'Sẵn sàng';
                readyBtn.className = 'btn btn-warning w-100 mb-2';
            }
            
            fetch('/Room/SetReady', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    roomId: roomId,
                    isReady: newIsReady
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('SetReady response:', data);
                if (data.success) {
                    // Update participant list to reflect the change
                    setTimeout(() => {
                        updateParticipantList();
                    }, 200);
                    
                    // Force update participant list again after a delay to ensure it's updated
                    setTimeout(() => {
                        updateParticipantList();
                    }, 1000);
                } else {
                    // Revert UI if server request failed
                    if (isReady) {
                        readyText.textContent = 'Hủy sẵn sàng';
                        readyBtn.className = 'btn btn-secondary w-100 mb-2';
                    } else {
                        readyText.textContent = 'Sẵn sàng';
                        readyBtn.className = 'btn btn-warning w-100 mb-2';
                    }
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Revert UI if request failed
                if (isReady) {
                    readyText.textContent = 'Hủy sẵn sàng';
                    readyBtn.className = 'btn btn-secondary w-100 mb-2';
                } else {
                    readyText.textContent = 'Sẵn sàng';
                    readyBtn.className = 'btn btn-warning w-100 mb-2';
                }
                alert('Có lỗi xảy ra!');
            })
            .finally(() => {
                // Re-enable button
                readyBtn.disabled = false;
            });
        }
        
        // Leave room
        function leaveRoom() {
            if (confirm('Bạn có chắc muốn rời phòng?')) {
                fetch('/Room/Leave', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        roomId: roomId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = '/Room';
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra!');
                });
            }
        }
        
        // Update ready button state on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing...');
            
            if (isParticipant) {
                const participant = @Html.Raw(Json.Serialize(Model.Participants.FirstOrDefault(p => p.UserId == currentUserId)));
                if (participant && participant.isReady) {
                    const readyBtn = document.getElementById('readyBtn');
                    const readyText = document.getElementById('readyText');
                    readyText.textContent = 'Hủy sẵn sàng';
                    readyBtn.className = 'btn btn-secondary w-100 mb-2';
                }
            }
            
            // Initial update of participant list and room actions
            setTimeout(() => {
                updateParticipantList();
                updateRoomActions();
            }, 500);
        });
    </script>
}

<style>
    .player-item {
        transition: all 0.3s ease;
    }
    
    .player-item:hover {
        background-color: #f8f9fa;
    }
</style>
