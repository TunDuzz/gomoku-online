@model GomokuOnline.Models.Entities.Game
@using GomokuOnline.Models.Entities
@{
    var currentUserId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
}

<div class="game-board-container">
    <!-- Game Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h5 class="mb-0">Bàn cờ @Model.BoardSize x @Model.BoardSize</h5>
            <small class="text-muted">Thắng: @Model.WinCondition quân liên tiếp</small>
        </div>
        <div class="text-end">
            <div class="mb-2">
                <span class="turn-indicator badge bg-warning text-dark fs-6">
                    <i class="fas fa-clock me-1"></i>
                    @if (currentUserId == Model.CurrentTurnUserId)
                    {
                        <span>Lượt của bạn</span>
                    }
                    else
                    {
                        <span>Lượt đối thủ</span>
                    }
                </span>
            </div>
            @switch (Model.Status)
            {
                case GameStatus.InProgress:
                    <span class="badge bg-warning text-dark fs-6">
                        <i class="fas fa-play me-1"></i>Đang chơi
                    </span>
                    break;
                case GameStatus.Completed:
                    <span class="badge bg-success fs-6">
                        <i class="fas fa-trophy me-1"></i>Hoàn thành
                    </span>
                    break;
                case GameStatus.Draw:
                    <span class="badge bg-secondary fs-6">
                        <i class="fas fa-handshake me-1"></i>Hòa
                    </span>
                    break;
                default:
                    <span class="badge bg-info fs-6">@Model.Status</span>
                    break;
            }
        </div>
    </div>

    <!-- Game Board -->
    <div class="text-center">
        <div id="gameBoard" class="game-board mx-auto" 
             data-board-size="@Model.BoardSize" 
             data-win-condition="@Model.WinCondition"
             data-game-id="@Model.Id">
            <!-- Board will be generated by JavaScript -->
        </div>
    </div>

    <!-- Game Controls -->
    <div class="text-center mt-4">
        @if (Model.Status == GameStatus.InProgress)
        {
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-warning" onclick="surrender()">
                    <i class="fas fa-flag me-2"></i>Đầu hàng
                </button>
                <button type="button" class="btn btn-outline-info" onclick="requestDraw()">
                    <i class="fas fa-handshake me-2"></i>Xin hòa
                </button>
            </div>
        }
    </div>
</div>

<script>
    // Initialize game board when this partial view loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeGameBoard(@Model.Id);
    });

    // Global variables for this game
    const CURRENT_USER_ID = @currentUserId;
    const CURRENT_TURN_USER_ID = @(Model.CurrentTurnUserId ?? 0);
    const boardSize = @Model.BoardSize;
    const gameId = @Model.Id;
    let gameBoard = [];
    let isMyTurn = CURRENT_USER_ID === CURRENT_TURN_USER_ID;

    // Initialize the game board
    function initializeGameBoard(gameId) {
        console.log('Initializing game board for game:', gameId);
        
        // Reset board state
        resetBoard();
        
        const boardContainer = document.getElementById('gameBoard');
        if (!boardContainer) {
            console.error('Board container not found');
            return;
        }

        // Clear existing content
        boardContainer.innerHTML = '';

        // Set CSS grid columns and rows dynamically
        const cellSize = window.innerWidth <= 768 ? 30 : 40;
        boardContainer.style.gridTemplateColumns = `repeat(${boardSize}, ${cellSize}px)`;
        boardContainer.style.gridTemplateRows = `repeat(${boardSize}, ${cellSize}px)`;

        // Create board grid
        for (let i = 0; i < boardSize; i++) {
            for (let j = 0; j < boardSize; j++) {
                gameBoard[i][j] = '';
                const cell = document.createElement('div');
                cell.className = 'board-cell';
                cell.setAttribute('data-row', i);
                cell.setAttribute('data-col', j);
                cell.onclick = () => makeMove(i, j);
                boardContainer.appendChild(cell);
            }
        }

        // Load existing moves
        loadMoves();
        updateTurnIndicator();
        
        // Join game via SignalR
        setTimeout(() => {
            if (window.signalRClient && window.signalRClient.isConnected) {
                console.log('SignalR connected, joining game...');
                window.signalRClient.joinGame(gameId);
                setupGameSignalREventListeners();
            }
        }, 1000);
    }

    // Reset board state
    function resetBoard() {
        console.log('Resetting board...');
        gameBoard = [];
        for (let i = 0; i < boardSize; i++) {
            gameBoard[i] = [];
            for (let j = 0; j < boardSize; j++) {
                gameBoard[i][j] = '';
            }
        }
    }

    // Load existing moves from server
    function loadMoves() {
        const moves = [
            @foreach (var move in Model.Moves.OrderBy(m => m.MoveNumber))
            {
                <text>
                {
                    row: @move.Row,
                    col: @move.Column,
                    symbol: '@move.Symbol',
                    userId: @move.UserId
                },
                </text>
            }
        ];
        console.log('Loading moves:', moves);
        moves.forEach(move => {
            gameBoard[move.row][move.col] = move.symbol;
            const cell = document.querySelector(`[data-row="${move.row}"][data-col="${move.col}"]`);
            if (cell) {
                cell.textContent = move.symbol;
                cell.className = `board-cell ${move.symbol === 'X' ? 'player-x' : 'player-o'}`;
            }
        });
    }

    // Make a move
    function makeMove(row, col) {
        if (!isMyTurn) {
            alert('Chưa đến lượt của bạn!');
            return;
        }
        
        if (row < 0 || row >= boardSize || col < 0 || col >= boardSize) {
            alert('Vị trí không hợp lệ!');
            return;
        }
        
        if (gameBoard[row][col] !== '') {
            alert('Ô này đã có quân cờ!');
            return;
        }

        // Send move to server via SignalR
        if (window.signalRClient && window.signalRClient.isConnected) {
            window.signalRClient.makeMove(gameId, row, col);
        } else {
            alert('Kết nối bị mất. Vui lòng tải lại trang.');
        }
    }

    // Update turn indicator
    function updateTurnIndicator() {
        const turnIndicator = document.querySelector('.turn-indicator');
        if (turnIndicator) {
            if (isMyTurn) {
                turnIndicator.innerHTML = '<i class="fas fa-clock me-1"></i><span>Lượt của bạn</span>';
                turnIndicator.className = 'turn-indicator badge bg-success fs-6';
            } else {
                turnIndicator.innerHTML = '<i class="fas fa-clock me-1"></i><span>Lượt đối thủ</span>';
                turnIndicator.className = 'turn-indicator badge bg-warning text-dark fs-6';
            }
        }
    }

    // Set up SignalR event listeners for game
    function setupGameSignalREventListeners() {
        if (!window.signalRClient || !window.signalRClient.gameHub) {
            console.error('SignalR client or gameHub not available');
            return;
        }

        // Listen for move updates
        window.signalRClient.gameHub.on('MoveMade', function(data) {
            console.log('Move received:', data);
            if (data.gameId === gameId) {
                window.gameBoard.updateMove(data.row, data.col, data.symbol);
                isMyTurn = data.currentTurnUserId === CURRENT_USER_ID;
                updateTurnIndicator();
            }
        });

        // Listen for game status updates
        window.signalRClient.gameHub.on('GameStatusChanged', function(data) {
            console.log('Game status changed:', data);
            if (data.gameId === gameId) {
                location.reload();
            }
        });
    }

    // Game control functions
    function surrender() {
        if (confirm('Bạn có chắc muốn đầu hàng?')) {
            if (window.signalRClient && window.signalRClient.isConnected) {
                window.signalRClient.surrender(gameId);
            }
        }
    }

    function requestDraw() {
        if (confirm('Bạn có muốn xin hòa?')) {
            if (window.signalRClient && window.signalRClient.isConnected) {
                window.signalRClient.requestDraw(gameId);
            }
        }
    }

    // Global gameBoard object for SignalR updates
    window.gameBoard = {
        updateMove: function(row, col, symbol) {
            if (row < 0 || row >= boardSize || col < 0 || col >= boardSize) {
                return;
            }
            
            if (gameBoard[row][col] !== '') {
                return;
            }
            
            gameBoard[row][col] = symbol;
            
            const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            if (cell) {
                cell.textContent = symbol;
                cell.className = `board-cell ${symbol === 'X' ? 'player-x' : 'player-o'}`;
            }
        }
    };
</script>

<style>
    /* Game Board Styles */
    .game-board-container {
        padding: 20px;
    }

    .game-board {
        display: grid;
        gap: 2px;
        background-color: #333;
        padding: 10px;
        border-radius: 8px;
        max-width: 600px;
        margin: 0 auto;
        width: fit-content;
        justify-content: center;
        border: 3px solid #333;
        min-height: 500px;
    }

    .board-cell {
        width: 40px;
        height: 40px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
        box-sizing: border-box;
        user-select: none;
        position: relative;
        aspect-ratio: 1;
        flex-shrink: 0;
    }

    .board-cell:hover {
        background-color: #e9ecef;
        transform: scale(1.05);
    }

    .board-cell.player-x {
        color: #007bff;
        background-color: #e3f2fd;
    }

    .board-cell.player-o {
        color: #dc3545;
        background-color: #ffebee;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .game-board {
            max-width: 400px;
        }
        
        .board-cell {
            width: 30px;
            height: 30px;
            font-size: 14px;
        }
    }

    @@media (max-width: 576px) {
        .game-board {
            max-width: 300px;
        }
        
        .board-cell {
            width: 25px;
            height: 25px;
            font-size: 12px;
        }

        .btn-group .btn {
            padding: 0.375rem 0.5rem;
            font-size: 0.875rem;
        }
    }
</style>
