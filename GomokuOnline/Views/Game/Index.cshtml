@model GomokuOnline.ViewModels.Game.GameViewModel
@using GomokuOnline.Models.Entities
@{
    ViewData["Title"] = "Gomoku Online - Trang chủ";
}

<div class="container-fluid mt-3">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-gamepad me-2"></i>
                        Menu Game
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a asp-controller="Room" asp-action="Create" class="btn btn-success">
                            <i class="fas fa-plus me-2"></i>
                            Tạo phòng mới
                        </a>
                        <a asp-controller="Game" asp-action="GameHistory" class="btn btn-warning">
                            <i class="fas fa-history me-2"></i>
                            Lịch sử game
                        </a>
                    </div>
                </div>
            </div>

            <!-- Thống kê nhanh -->
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-chart-bar me-2"></i>
                        Thống kê
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <h5 class="text-primary mb-0" id="activeGamesCount">@Model.ActiveGames.Count</h5>
                            <small class="text-muted">Game đang chơi</small>
                        </div>
                        <div class="col-6">
                            <h5 class="text-success mb-0" id="userGamesCount">@Model.UserGames.Count</h5>
                            <small class="text-muted">Game của bạn</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <!-- Game đang diễn ra -->
            <div class="card">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="fas fa-play-circle me-2"></i>
                            Game đang diễn ra
                        </h6>
                        <div class="d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm text-light me-2" id="updateSpinner" style="display: none;"></div>
                            <small class="text-light" id="lastUpdate">Cập nhật lần cuối: Vừa xong</small>
                        </div>
                    </div>
                </div>
                <div class="card-body" id="activeGamesContainer">
                    @if (Model.ActiveGames.Any())
                    {
                        <div class="row" id="activeGamesList">
                            @foreach (var game in Model.ActiveGames.Take(6))
                            {
                                <div class="col-md-6 col-lg-4 mb-3" data-game-id="@game.Id">
                                    <div class="card h-100 border-success">
                                        <div class="card-header bg-light">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h6 class="mb-0">
                                                    <i class="fas fa-chess-board me-2"></i>
                                                    @game.GameRoom?.Name
                                                </h6>
                                                <span class="badge bg-success">
                                                    <i class="fas fa-play me-1"></i>Đang chơi
                                                </span>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="row text-center mb-3">
                                                <div class="col-4">
                                                    <h6 class="text-primary mb-0">@game.BoardSize</h6>
                                                    <small class="text-muted">Bàn cờ</small>
                                                </div>
                                                <div class="col-4">
                                                    <h6 class="text-success mb-0">@game.WinCondition</h6>
                                                    <small class="text-muted">Thắng</small>
                                                </div>
                                                <div class="col-4">
                                                    <h6 class="text-info mb-0 game-moves" data-game-id="@game.Id">@game.TotalMoves</h6>
                                                    <small class="text-muted">Nước đi</small>
                                                </div>
                                            </div>
                                            
                                            <div class="mb-3">
                                                <small class="text-muted">
                                                    <i class="fas fa-users me-1"></i>
                                                    <span class="player-count" data-game-id="@game.Id">@game.GameRoom?.Participants.Count(p => p.Type == ParticipantType.Player)</span> người chơi
                                                </small>
                                            </div>
                                            
                                            <div class="mb-3">
                                                <small class="text-muted">
                                                    <i class="fas fa-clock me-1"></i>
                                                    Bắt đầu: @game.StartedAt.ToString("HH:mm")
                                                </small>
                                            </div>
                                            
                                            <div class="d-grid">
                                                <a asp-action="Room" asp-route-id="@game.Id" class="btn btn-success">
                                                    <i class="fas fa-play me-1"></i>
                                                    Vào chơi
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (Model.ActiveGames.Count > 6)
                        {
                            <div class="text-center mt-3">
                                <a asp-controller="Game" asp-action="GameHistory" class="btn btn-outline-primary">
                                    <i class="fas fa-list me-1"></i>
                                    Xem tất cả game
                                </a>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4" id="noGamesMessage">
                            <i class="fas fa-gamepad fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Chưa có game nào đang diễn ra</h5>
                            <p class="text-muted">Hãy tạo phòng mới hoặc tham gia phòng khác để bắt đầu chơi</p>
                            <div class="d-flex justify-content-center gap-2">
                                <a asp-controller="Room" asp-action="Create" class="btn btn-primary">
                                    <i class="fas fa-plus me-2"></i>
                                    Tạo phòng mới
                                </a>
                                <a asp-controller="Room" asp-action="Index" class="btn btn-outline-primary">
                                    <i class="fas fa-list me-2"></i>
                                    Xem tất cả phòng
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

    <script>
        let updateInterval;
        let gameIndexConnection;
    let lastUpdateTime = new Date();

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeSignalR();
        startRealTimeUpdates();
    });
    
    // Initialize SignalR
    async function initializeSignalR() {
        try {
            // Connect to GameHub
            gameIndexConnection = new signalR.HubConnectionBuilder()
                .withUrl("/gameHub")
                .withAutomaticReconnect()
                .build();
            
            await gameIndexConnection.start();
            
            // Listen for game events from GameHub
            gameIndexConnection.on("GameStarted", (data) => {
                updateActiveGames();
            });
            
            gameIndexConnection.on("GameEnded", (data) => {
                updateActiveGames();
            });
            
            gameIndexConnection.on("Error", (message) => {
                console.error("SignalR Error:", message);
            });

            // Connect to RoomHub for room events
            const roomIndexConnection = new signalR.HubConnectionBuilder()
                .withUrl("/roomHub")
                .withAutomaticReconnect()
                .build();
            
            await roomIndexConnection.start();
            
            // Listen for room events from RoomHub
            roomIndexConnection.on("GameStarted", (data) => {
                updateActiveGames();
            });
            
            roomIndexConnection.on("RoomCreated", (data) => {
                updateActiveGames();
            });
            
            roomIndexConnection.on("RoomStatusChanged", (data) => {
                updateActiveGames();
            });
            
            roomIndexConnection.on("Error", (message) => {
                console.error("RoomHub SignalR Error:", message);
            });
        } catch (err) {
            console.error("SignalR connection failed:", err);
        }
    }

    // Start real-time updates
    function startRealTimeUpdates() {
        // Initial update
        updateActiveGames();
        
        // Update when window becomes visible (fallback)
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                updateActiveGames();
            }
        });
    }

    // Update active games list
    async function updateActiveGames() {
        try {
            // Show loading spinner
            const spinner = document.getElementById('updateSpinner');
            spinner.style.display = 'inline-block';

            const response = await fetch('/Game/GetActiveGames');
            const data = await response.json();
            
            if (data.success) {
                updateGamesList(data.games);
                updateStatistics(data.games.length, data.userGamesCount);
                updateLastUpdateTime();
            }
        } catch (error) {
            console.error('Error updating active games:', error);
        } finally {
            // Hide loading spinner
            const spinner = document.getElementById('updateSpinner');
            spinner.style.display = 'none';
        }
    }

    // Update games list in UI
    function updateGamesList(games) {
        const container = document.getElementById('activeGamesContainer');
        const noGamesMessage = document.getElementById('noGamesMessage');
        
        if (!games || games.length === 0) {
            // Show no games message
            container.innerHTML = `
                <div class="text-center py-4" id="noGamesMessage">
                    <i class="fas fa-gamepad fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Chưa có game nào đang diễn ra</h5>
                    <p class="text-muted">Hãy tạo phòng mới hoặc tham gia phòng khác để bắt đầu chơi</p>
                    <div class="d-flex justify-content-center gap-2">
                        <a href="/Room/Create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>
                            Tạo phòng mới
                        </a>
                        <a href="/Room" class="btn btn-outline-primary">
                            <i class="fas fa-list me-2"></i>
                            Xem tất cả phòng
                        </a>
                    </div>
                </div>
            `;
            return;
        }

        // Hide no games message if exists
        if (noGamesMessage) {
            noGamesMessage.style.display = 'none';
        }

        let html = '<div class="row" id="activeGamesList">';
        
        games.slice(0, 6).forEach(game => {
            const isWaiting = game.type === 'waiting';
            const statusBadge = isWaiting ? 
                '<span class="badge bg-warning text-dark"><i class="fas fa-clock me-1"></i>Chờ người chơi</span>' :
                '<span class="badge bg-success"><i class="fas fa-play me-1"></i>Đang chơi</span>';
            
            const actionButton = isWaiting ?
                `<a href="/Room/Details/${game.id}" class="btn btn-warning">
                    <i class="fas fa-sign-in-alt me-1"></i>
                    Tham gia
                </a>` :
                `<a href="/Game/Room/${game.id}" class="btn btn-success">
                    <i class="fas fa-play me-1"></i>
                    Vào chơi
                </a>`;

            const movesDisplay = isWaiting ? '0' : game.totalMoves;
            const startTime = isWaiting ? 'Chưa bắt đầu' : `Bắt đầu: ${new Date(game.startedAt).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'})}`;

            html += `
                <div class="col-md-6 col-lg-4 mb-3" data-game-id="${game.id}">
                    <div class="card h-100 ${isWaiting ? 'border-warning' : 'border-success'}">
                        <div class="card-header bg-light">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">
                                    <i class="fas fa-chess-board me-2"></i>
                                    ${game.roomName}
                                </h6>
                                ${statusBadge}
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row text-center mb-3">
                                <div class="col-4">
                                    <h6 class="text-primary mb-0">${game.boardSize}</h6>
                                    <small class="text-muted">Bàn cờ</small>
                                </div>
                                <div class="col-4">
                                    <h6 class="text-success mb-0">${game.winCondition}</h6>
                                    <small class="text-muted">Thắng</small>
                                </div>
                                <div class="col-4">
                                    <h6 class="text-info mb-0 game-moves" data-game-id="${game.id}">${movesDisplay}</h6>
                                    <small class="text-muted">Nước đi</small>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <small class="text-muted">
                                    <i class="fas fa-users me-1"></i>
                                    <span class="player-count" data-game-id="${game.id}">${game.playerCount}</span> người chơi
                                </small>
                            </div>
                            
                            <div class="mb-3">
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i>
                                    ${startTime}
                                </small>
                            </div>
                            
                            <div class="d-grid">
                                ${actionButton}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        
        // Add "View all games" button if more than 6 games
        if (games.length > 6) {
            html += `
                <div class="text-center mt-3">
                    <a href="/Game/GameHistory" class="btn btn-outline-primary">
                        <i class="fas fa-list me-1"></i>
                        Xem tất cả game
                    </a>
                </div>
            `;
        }
        
        container.innerHTML = html;
    }

    // Update statistics
    function updateStatistics(activeGamesCount, userGamesCount) {
        const activeGamesElement = document.getElementById('activeGamesCount');
        const userGamesElement = document.getElementById('userGamesCount');
        
        if (activeGamesElement) {
            activeGamesElement.textContent = activeGamesCount;
        }
        
        if (userGamesElement) {
            userGamesElement.textContent = userGamesCount;
        }
    }

    // Update last update time
    function updateLastUpdateTime() {
        const now = new Date();
        const timeDiff = Math.floor((now - lastUpdateTime) / 1000);
        const lastUpdateElement = document.getElementById('lastUpdate');
        
        if (lastUpdateElement) {
            if (timeDiff < 60) {
                lastUpdateElement.textContent = `Cập nhật lần cuối: ${timeDiff} giây trước`;
            } else if (timeDiff < 3600) {
                const minutes = Math.floor(timeDiff / 60);
                lastUpdateElement.textContent = `Cập nhật lần cuối: ${minutes} phút trước`;
            } else {
                const hours = Math.floor(timeDiff / 3600);
                lastUpdateElement.textContent = `Cập nhật lần cuối: ${hours} giờ trước`;
            }
        }
        
        lastUpdateTime = now;
    }

    // Cleanup when page unloads
    window.addEventListener('beforeunload', function() {
        if (updateInterval) {
            clearInterval(updateInterval);
        }
    });
</script> 