// <auto-generated />
using System;
using GomokuOnline.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GomokuOnline.Migrations
{
    [DbContext(typeof(GomokuDbContext))]
    [Migration("20250813183715_NewData")]
    partial class NewData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GomokuOnline.Models.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameRoomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("UserId");

                    b.HasIndex("GameRoomId", "CreatedAt");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardSize")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentTurnUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastMoveAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimitSeconds")
                        .HasColumnType("int");

                    b.Property<int>("TotalMoves")
                        .HasColumnType("int");

                    b.Property<int>("WinCondition")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTurnUserId");

                    b.HasIndex("GameRoomId");

                    b.HasIndex("WinnerUserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameRoomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerOrder")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameRoomId");

                    b.HasIndex("UserId", "GameRoomId")
                        .IsUnique();

                    b.ToTable("GameParticipants");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimitMinutes")
                        .HasColumnType("int");

                    b.Property<int>("WinCondition")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("GameRooms");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BoardState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("GameStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastMoveId")
                        .HasColumnType("int");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastMoveId");

                    b.HasIndex("GameId", "MoveNumber");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GameId", "MoveNumber");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoggedOutAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighestRating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastGameAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TotalDraws")
                        .HasColumnType("int");

                    b.Property<int>("TotalGames")
                        .HasColumnType("int");

                    b.Property<int>("TotalLosses")
                        .HasColumnType("int");

                    b.Property<int>("TotalWins")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Rating");

                    b.HasIndex("TotalWins");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.ChatMessage", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.GameRoom", "GameRoom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("GameRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomokuOnline.Models.Entities.ChatMessage", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GomokuOnline.Models.Entities.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameRoom");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.Game", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.User", "CurrentTurnUser")
                        .WithMany()
                        .HasForeignKey("CurrentTurnUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GomokuOnline.Models.Entities.GameRoom", "GameRoom")
                        .WithMany("Games")
                        .HasForeignKey("GameRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomokuOnline.Models.Entities.User", "WinnerUser")
                        .WithMany()
                        .HasForeignKey("WinnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentTurnUser");

                    b.Navigation("GameRoom");

                    b.Navigation("WinnerUser");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameParticipant", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.GameRoom", "GameRoom")
                        .WithMany("Participants")
                        .HasForeignKey("GameRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomokuOnline.Models.Entities.User", "User")
                        .WithMany("GameParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameRoom", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameState", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.Game", "Game")
                        .WithMany("GameStates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomokuOnline.Models.Entities.Move", "LastMove")
                        .WithMany()
                        .HasForeignKey("LastMoveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("LastMove");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.Move", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GomokuOnline.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.UserSession", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.UserStats", b =>
                {
                    b.HasOne("GomokuOnline.Models.Entities.User", "User")
                        .WithOne("UserStats")
                        .HasForeignKey("GomokuOnline.Models.Entities.UserStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.ChatMessage", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.Game", b =>
                {
                    b.Navigation("GameStates");

                    b.Navigation("Moves");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.GameRoom", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Games");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("GomokuOnline.Models.Entities.User", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("GameParticipants");

                    b.Navigation("UserSessions");

                    b.Navigation("UserStats");
                });
#pragma warning restore 612, 618
        }
    }
}
